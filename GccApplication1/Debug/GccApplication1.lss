
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00800060  00000dfe  00000e92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800102  00800102  00000f34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000205c  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e8b  00000000  00000000  00003204  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012c4  00000000  00000000  0000408f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00005354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082c  00000000  00000000  00005724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e71  00000000  00000000  00005f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00006dc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 30       	cpi	r26, 0x02	; 2
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 e0       	ldi	r26, 0x02	; 2
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 31       	cpi	r26, 0x10	; 16
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{
	
	KEYPAD_voidInit();
  92:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <KEYPAD_voidInit>
	LCD_voidInit();
  96:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCD_voidInit>
	UART_init(9600);
  9a:	60 e8       	ldi	r22, 0x80	; 128
  9c:	75 e2       	ldi	r23, 0x25	; 37
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 9a 04 	call	0x934	; 0x934 <UART_init>
	ADC_init(ADC_Divide_by_4);
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	0e 94 09 03 	call	0x612	; 0x612 <ADC_init>
	TIMER1_vInit();
  ac:	0e 94 4c 04 	call	0x898	; 0x898 <TIMER1_vInit>
	TIMER1_vStart();
  b0:	0e 94 59 04 	call	0x8b2	; 0x8b2 <TIMER1_vStart>
	sei();
  b4:	78 94       	sei
	Timer1_SetFastPWMCompareMatch(80);
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	80 ea       	ldi	r24, 0xA0	; 160
  bc:	92 e4       	ldi	r25, 0x42	; 66
  be:	0e 94 65 04 	call	0x8ca	; 0x8ca <Timer1_SetFastPWMCompareMatch>
	Set_password();
  c2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Set_password>
	Keypad_Flag=0;
  c6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Keypad_Flag>
	u8 temp0=0;
	Main_Menu();
  ca:	0e 94 9c 01 	call	0x338	; 0x338 <Main_Menu>
	TIMER1_vStart();
	sei();
	Timer1_SetFastPWMCompareMatch(80);
	Set_password();
	Keypad_Flag=0;
	u8 temp0=0;
  ce:	d0 e0       	ldi	r29, 0x00	; 0
	Main_Menu();
    while (1){
		
		Keypad_Input();
  d0:	0e 94 01 02 	call	0x402	; 0x402 <Keypad_Input>
		u8 data = KEYPAD_u8ReadButton(Keypad_Row,Keypad_Col);
  d4:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <Keypad_Col>
  d8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Keypad_Row>
  dc:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <KEYPAD_u8ReadButton>
		if(Keypad_Flag){
  e0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Keypad_Flag>
  e4:	99 23       	and	r25, r25
  e6:	89 f1       	breq	.+98     	; 0x14a <main+0xb8>
			if(data=='+'){
  e8:	8b 32       	cpi	r24, 0x2B	; 43
  ea:	19 f5       	brne	.+70     	; 0x132 <main+0xa0>
				correct = 0;
  ec:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
				Keypad_Flag=0;
  f0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Keypad_Flag>
				LCD_ClearScreen();
  f4:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_ClearScreen>
				LCD_SendString("ENTER PASS:");
  f8:	8a e7       	ldi	r24, 0x7A	; 122
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_SendString>
				LCD_MoveCursor(LCD_Row1,LCD_Col0);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_MoveCursor>
				Enter_password(3);
 108:	83 e0       	ldi	r24, 0x03	; 3
 10a:	0e 94 2d 01 	call	0x25a	; 0x25a <Enter_password>
				
				if(!correct){
 10e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 112:	81 11       	cpse	r24, r1
 114:	07 c0       	rjmp	.+14     	; 0x124 <main+0x92>
					//error_handling();
					UART_sendString("error");
 116:	86 e8       	ldi	r24, 0x86	; 134
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <UART_sendString>
					forget_pass();
 11e:	0e 94 ab 01 	call	0x356	; 0x356 <forget_pass>
					continue;
 122:	d6 cf       	rjmp	.-84     	; 0xd0 <main+0x3e>
				}
				//door();
				UART_sendString("door");
 124:	82 eb       	ldi	r24, 0xB2	; 178
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 db 04 	call	0x9b6	; 0x9b6 <UART_sendString>
				Main_Menu();
 12c:	0e 94 9c 01 	call	0x338	; 0x338 <Main_Menu>
 130:	0a c0       	rjmp	.+20     	; 0x146 <main+0xb4>
			}
			else if (data=='-'){
 132:	8d 32       	cpi	r24, 0x2D	; 45
 134:	41 f4       	brne	.+16     	; 0x146 <main+0xb4>
				Set_password();
 136:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Set_password>
				UART_sendString(pass);
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <UART_sendString>
				Main_Menu();
 142:	0e 94 9c 01 	call	0x338	; 0x338 <Main_Menu>
			}
			Keypad_Flag=0;
 146:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Keypad_Flag>
		}
		u8 digital_signal = ADC_readChannel_single_conv(ADC_CHANNEL_0);
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <ADC_readChannel_single_conv>
		u8 currTemp = LM35_getTemperature(digital_signal);
 150:	99 27       	eor	r25, r25
 152:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LM35_getTemperature>
 156:	c8 2f       	mov	r28, r24
	
		if(currTemp!=temp0){
 158:	d8 17       	cp	r29, r24
 15a:	09 f4       	brne	.+2      	; 0x15e <main+0xcc>
 15c:	b9 cf       	rjmp	.-142    	; 0xd0 <main+0x3e>
			temp0 = currTemp;
			if(currTemp>35)
 15e:	84 32       	cpi	r24, 0x24	; 36
 160:	40 f0       	brcs	.+16     	; 0x172 <main+0xe0>
			Timer1_SetFastPWMCompareMatch(100);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	88 ec       	ldi	r24, 0xC8	; 200
 168:	92 e4       	ldi	r25, 0x42	; 66
 16a:	0e 94 65 04 	call	0x8ca	; 0x8ca <Timer1_SetFastPWMCompareMatch>
		}
		u8 digital_signal = ADC_readChannel_single_conv(ADC_CHANNEL_0);
		u8 currTemp = LM35_getTemperature(digital_signal);
	
		if(currTemp!=temp0){
			temp0 = currTemp;
 16e:	dc 2f       	mov	r29, r28
 170:	af cf       	rjmp	.-162    	; 0xd0 <main+0x3e>
			if(currTemp>35)
			Timer1_SetFastPWMCompareMatch(100);
			else if (currTemp>25 && currTemp<=35)
 172:	86 ee       	ldi	r24, 0xE6	; 230
 174:	8c 0f       	add	r24, r28
 176:	8a 30       	cpi	r24, 0x0A	; 10
 178:	40 f4       	brcc	.+16     	; 0x18a <main+0xf8>
			Timer1_SetFastPWMCompareMatch(50);
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	88 e4       	ldi	r24, 0x48	; 72
 180:	92 e4       	ldi	r25, 0x42	; 66
 182:	0e 94 65 04 	call	0x8ca	; 0x8ca <Timer1_SetFastPWMCompareMatch>
		}
		u8 digital_signal = ADC_readChannel_single_conv(ADC_CHANNEL_0);
		u8 currTemp = LM35_getTemperature(digital_signal);
	
		if(currTemp!=temp0){
			temp0 = currTemp;
 186:	dc 2f       	mov	r29, r28
 188:	a3 cf       	rjmp	.-186    	; 0xd0 <main+0x3e>
			if(currTemp>35)
			Timer1_SetFastPWMCompareMatch(100);
			else if (currTemp>25 && currTemp<=35)
			Timer1_SetFastPWMCompareMatch(50);
			else if (currTemp>20 &&  currTemp<=25)
 18a:	8b ee       	ldi	r24, 0xEB	; 235
 18c:	8c 0f       	add	r24, r28
 18e:	85 30       	cpi	r24, 0x05	; 5
 190:	40 f4       	brcc	.+16     	; 0x1a2 <main+0x110>
			Timer1_SetFastPWMCompareMatch(10);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	80 e2       	ldi	r24, 0x20	; 32
 198:	91 e4       	ldi	r25, 0x41	; 65
 19a:	0e 94 65 04 	call	0x8ca	; 0x8ca <Timer1_SetFastPWMCompareMatch>
		}
		u8 digital_signal = ADC_readChannel_single_conv(ADC_CHANNEL_0);
		u8 currTemp = LM35_getTemperature(digital_signal);
	
		if(currTemp!=temp0){
			temp0 = currTemp;
 19e:	dc 2f       	mov	r29, r28
 1a0:	97 cf       	rjmp	.-210    	; 0xd0 <main+0x3e>
			else if (currTemp>25 && currTemp<=35)
			Timer1_SetFastPWMCompareMatch(50);
			else if (currTemp>20 &&  currTemp<=25)
			Timer1_SetFastPWMCompareMatch(10);
			else
			Timer1_SetFastPWMCompareMatch(0);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	cb 01       	movw	r24, r22
 1a8:	0e 94 65 04 	call	0x8ca	; 0x8ca <Timer1_SetFastPWMCompareMatch>
		}
		u8 digital_signal = ADC_readChannel_single_conv(ADC_CHANNEL_0);
		u8 currTemp = LM35_getTemperature(digital_signal);
	
		if(currTemp!=temp0){
			temp0 = currTemp;
 1ac:	dc 2f       	mov	r29, r28
 1ae:	90 cf       	rjmp	.-224    	; 0xd0 <main+0x3e>

000001b0 <Set_password>:
#include "util/delay.h"

extern u8 Keypad_Flag=0;
u8 correct=0;

void Set_password(){
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
	
	/*********text for the user*************/
	LCD_SendString("Plz enter pass:");
 1b6:	8c e8       	ldi	r24, 0x8C	; 140
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_SendString>
	LCD_MoveCursor(LCD_Row1,LCD_Col0);
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_MoveCursor>
	Keypad_Flag=0;
 1c6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Keypad_Flag>
	
	/*****receiving the 5 letters of pass****/
	for(u8 pass_char = 0; pass_char<5; ++pass_char){
 1ca:	c0 e0       	ldi	r28, 0x00	; 0
 1cc:	2a c0       	rjmp	.+84     	; 0x222 <Set_password+0x72>
		while(!Keypad_Flag){
			Keypad_Input();
 1ce:	0e 94 01 02 	call	0x402	; 0x402 <Keypad_Input>
	LCD_MoveCursor(LCD_Row1,LCD_Col0);
	Keypad_Flag=0;
	
	/*****receiving the 5 letters of pass****/
	for(u8 pass_char = 0; pass_char<5; ++pass_char){
		while(!Keypad_Flag){
 1d2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Keypad_Flag>
 1d6:	88 23       	and	r24, r24
 1d8:	d1 f3       	breq	.-12     	; 0x1ce <Set_password+0x1e>
			Keypad_Input();
		}
		
		/**to make sure the user doen't include the on/off button***/
		
		if(KEYPAD_u8ReadButton(Keypad_Row,Keypad_Col)=='f'){
 1da:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <Keypad_Col>
 1de:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Keypad_Row>
 1e2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <KEYPAD_u8ReadButton>
 1e6:	86 36       	cpi	r24, 0x66	; 102
 1e8:	21 f4       	brne	.+8      	; 0x1f2 <Set_password+0x42>
			Keypad_Flag=0;
 1ea:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Keypad_Flag>
			--pass_char;
 1ee:	c1 50       	subi	r28, 0x01	; 1
			continue;
 1f0:	17 c0       	rjmp	.+46     	; 0x220 <Set_password+0x70>
		}
		
		//assigning the letter in the password array
		pass[pass_char] = KEYPAD_u8ReadButton(Keypad_Row,Keypad_Col);
 1f2:	0c 2f       	mov	r16, r28
 1f4:	10 e0       	ldi	r17, 0x00	; 0
 1f6:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <Keypad_Col>
 1fa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Keypad_Row>
 1fe:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <KEYPAD_u8ReadButton>
 202:	f8 01       	movw	r30, r16
 204:	eb 5f       	subi	r30, 0xFB	; 251
 206:	fe 4f       	sbci	r31, 0xFE	; 254
 208:	80 83       	st	Z, r24
		Keypad_Flag=0;
 20a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Keypad_Flag>
		LCD_voidSendData('*');
 20e:	8a e2       	ldi	r24, 0x2A	; 42
 210:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_voidSendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	8f e0       	ldi	r24, 0x0F	; 15
 216:	97 e2       	ldi	r25, 0x27	; 39
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <Set_password+0x68>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <Set_password+0x6e>
 21e:	00 00       	nop
	LCD_SendString("Plz enter pass:");
	LCD_MoveCursor(LCD_Row1,LCD_Col0);
	Keypad_Flag=0;
	
	/*****receiving the 5 letters of pass****/
	for(u8 pass_char = 0; pass_char<5; ++pass_char){
 220:	cf 5f       	subi	r28, 0xFF	; 255
 222:	c5 30       	cpi	r28, 0x05	; 5
 224:	b0 f2       	brcs	.-84     	; 0x1d2 <Set_password+0x22>
		_delay_ms(5);
	}
	
	//waiting the user to press on the "enter" button
	while(1){
		Keypad_Input();
 226:	0e 94 01 02 	call	0x402	; 0x402 <Keypad_Input>
		if(Keypad_Flag==1 && KEYPAD_u8ReadButton(Keypad_Row,Keypad_Col)=='='){
 22a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Keypad_Flag>
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	d1 f7       	brne	.-12     	; 0x226 <Set_password+0x76>
 232:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <Keypad_Col>
 236:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Keypad_Row>
 23a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <KEYPAD_u8ReadButton>
 23e:	8d 33       	cpi	r24, 0x3D	; 61
 240:	91 f7       	brne	.-28     	; 0x226 <Set_password+0x76>
			Keypad_Flag=0;
 242:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Keypad_Flag>
			LCD_ClearScreen();
 246:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_ClearScreen>
			break;
		}
	}
	UART_sendString(pass);
 24a:	85 e0       	ldi	r24, 0x05	; 5
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <UART_sendString>
	
}
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <Enter_password>:



/*this function is for entering password*/
void Enter_password(u8 trials){
 25a:	ff 92       	push	r15
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	d8 2f       	mov	r29, r24
	
	
	
	/*3 trial for the user to input the right password*/
	
	while(trials--){
 266:	5d c0       	rjmp	.+186    	; 0x322 <Enter_password+0xc8>
		for(u8 pass_char = 0; pass_char<5; ++pass_char){
			while(!Keypad_Flag){
				Keypad_Input();
 268:	0e 94 01 02 	call	0x402	; 0x402 <Keypad_Input>
	
	/*3 trial for the user to input the right password*/
	
	while(trials--){
		for(u8 pass_char = 0; pass_char<5; ++pass_char){
			while(!Keypad_Flag){
 26c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Keypad_Flag>
 270:	88 23       	and	r24, r24
 272:	d1 f3       	breq	.-12     	; 0x268 <Enter_password+0xe>
				Keypad_Input();
			}
			
			if(KEYPAD_u8ReadButton(Keypad_Row,Keypad_Col)=='f'){
 274:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <Keypad_Col>
 278:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Keypad_Row>
 27c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <KEYPAD_u8ReadButton>
 280:	86 36       	cpi	r24, 0x66	; 102
 282:	21 f4       	brne	.+8      	; 0x28c <Enter_password+0x32>
				Keypad_Flag=0;
 284:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Keypad_Flag>
				--pass_char;
 288:	c1 50       	subi	r28, 0x01	; 1
				continue;
 28a:	17 c0       	rjmp	.+46     	; 0x2ba <Enter_password+0x60>
			}
			
			pass[pass_char] = KEYPAD_u8ReadButton(Keypad_Row,Keypad_Col);
 28c:	0c 2f       	mov	r16, r28
 28e:	10 e0       	ldi	r17, 0x00	; 0
 290:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <Keypad_Col>
 294:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Keypad_Row>
 298:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <KEYPAD_u8ReadButton>
 29c:	f8 01       	movw	r30, r16
 29e:	eb 5f       	subi	r30, 0xFB	; 251
 2a0:	fe 4f       	sbci	r31, 0xFE	; 254
 2a2:	80 83       	st	Z, r24
			
			Keypad_Flag=0;
 2a4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Keypad_Flag>
			LCD_voidSendData('*');
 2a8:	8a e2       	ldi	r24, 0x2A	; 42
 2aa:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_voidSendData>
 2ae:	8f e0       	ldi	r24, 0x0F	; 15
 2b0:	97 e2       	ldi	r25, 0x27	; 39
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <Enter_password+0x58>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <Enter_password+0x5e>
 2b8:	00 00       	nop
	
	
	/*3 trial for the user to input the right password*/
	
	while(trials--){
		for(u8 pass_char = 0; pass_char<5; ++pass_char){
 2ba:	cf 5f       	subi	r28, 0xFF	; 255
 2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <Enter_password+0x66>
 2be:	c0 e0       	ldi	r28, 0x00	; 0
 2c0:	c5 30       	cpi	r28, 0x05	; 5
 2c2:	a0 f2       	brcs	.-88     	; 0x26c <Enter_password+0x12>
			LCD_voidSendData('*');
			_delay_ms(5);
		}
		
		while(1){
			Keypad_Input();
 2c4:	0e 94 01 02 	call	0x402	; 0x402 <Keypad_Input>
			if(Keypad_Flag==1 && KEYPAD_u8ReadButton(Keypad_Row,Keypad_Col)=='='){
 2c8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Keypad_Flag>
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	d1 f7       	brne	.-12     	; 0x2c4 <Enter_password+0x6a>
 2d0:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <Keypad_Col>
 2d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Keypad_Row>
 2d8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <KEYPAD_u8ReadButton>
 2dc:	8d 33       	cpi	r24, 0x3D	; 61
 2de:	91 f7       	brne	.-28     	; 0x2c4 <Enter_password+0x6a>
				Keypad_Flag=0;
 2e0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Keypad_Flag>
				LCD_ClearScreen();
 2e4:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_ClearScreen>
				break;
			}
		}
		
		/*check if the password is right*/
		UART_sendString(pass);
 2e8:	85 e0       	ldi	r24, 0x05	; 5
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 db 04 	call	0x9b6	; 0x9b6 <UART_sendString>
		u8 equal_flag = UART_recieveByte();
 2f0:	0e 94 d7 04 	call	0x9ae	; 0x9ae <UART_recieveByte>
		
		if(equal_flag == '1'){
 2f4:	81 33       	cpi	r24, 0x31	; 49
 2f6:	21 f4       	brne	.+8      	; 0x300 <Enter_password+0xa6>
			correct = 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			return;
 2fe:	16 c0       	rjmp	.+44     	; 0x32c <Enter_password+0xd2>
		}
		if(trials!=0){
 300:	ff 20       	and	r15, r15
 302:	71 f0       	breq	.+28     	; 0x320 <Enter_password+0xc6>
			LCD_ClearScreen();
 304:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_ClearScreen>
			LCD_voidSendData((trials)+'0');
 308:	8f e2       	ldi	r24, 0x2F	; 47
 30a:	8d 0f       	add	r24, r29
 30c:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_voidSendData>
			LCD_SendString(" trials left:");
 310:	8c e9       	ldi	r24, 0x9C	; 156
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_SendString>
			LCD_MoveCursor(LCD_Row1,LCD_Col0);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_MoveCursor>
 320:	df 2d       	mov	r29, r15
	
	
	
	/*3 trial for the user to input the right password*/
	
	while(trials--){
 322:	ff 24       	eor	r15, r15
 324:	fa 94       	dec	r15
 326:	fd 0e       	add	r15, r29
 328:	d1 11       	cpse	r29, r1
 32a:	c9 cf       	rjmp	.-110    	; 0x2be <Enter_password+0x64>
			LCD_SendString(" trials left:");
			LCD_MoveCursor(LCD_Row1,LCD_Col0);
		}
	}
	
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	08 95       	ret

00000338 <Main_Menu>:

// it's the display of the MENU option
void Main_Menu(){
	
	LCD_ClearScreen();
 338:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_ClearScreen>
	LCD_SendString("+: open door");
 33c:	8a ea       	ldi	r24, 0xAA	; 170
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_SendString>
	LCD_MoveCursor(LCD_Row1,LCD_Col0);
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_MoveCursor>
	LCD_SendString("-: change pass");
 34c:	87 eb       	ldi	r24, 0xB7	; 183
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_SendString>
 354:	08 95       	ret

00000356 <forget_pass>:
// 	Enter_password(3);
// }


void forget_pass(){
	LCD_ClearScreen();
 356:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_ClearScreen>
	LCD_SendString("forgot password?");
 35a:	86 ec       	ldi	r24, 0xC6	; 198
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_SendString>
	LCD_MoveCursor(LCD_Row1,LCD_Col0);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_MoveCursor>
	LCD_SendString("+: YES  -: NO");
 36a:	87 ed       	ldi	r24, 0xD7	; 215
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_SendString>
	while(1){
		Keypad_Input();
 372:	0e 94 01 02 	call	0x402	; 0x402 <Keypad_Input>
		if(Keypad_Flag==1){
 376:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Keypad_Flag>
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	d1 f7       	brne	.-12     	; 0x372 <forget_pass+0x1c>
			u8 data2 = KEYPAD_u8ReadButton(Keypad_Row,Keypad_Col);
 37e:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <Keypad_Col>
 382:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Keypad_Row>
 386:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <KEYPAD_u8ReadButton>
			if(data2 == '+'){
 38a:	8b 32       	cpi	r24, 0x2B	; 43
 38c:	e1 f4       	brne	.+56     	; 0x3c6 <forget_pass+0x70>
				LCD_ClearScreen();
 38e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_ClearScreen>
				LCD_SendString("confirm you are");
 392:	85 ee       	ldi	r24, 0xE5	; 229
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_SendString>
				LCD_MoveCursor(LCD_Row1,LCD_Col0);
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_MoveCursor>
				LCD_SendString("not a Robot");
 3a2:	85 ef       	ldi	r24, 0xF5	; 245
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_SendString>
				Keypad_Flag=0;
 3aa:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Keypad_Flag>
				while(!Keypad_Flag){
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <forget_pass+0x5e>
					Keypad_Input();
 3b0:	0e 94 01 02 	call	0x402	; 0x402 <Keypad_Input>
				LCD_ClearScreen();
				LCD_SendString("confirm you are");
				LCD_MoveCursor(LCD_Row1,LCD_Col0);
				LCD_SendString("not a Robot");
				Keypad_Flag=0;
				while(!Keypad_Flag){
 3b4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Keypad_Flag>
 3b8:	88 23       	and	r24, r24
 3ba:	d1 f3       	breq	.-12     	; 0x3b0 <forget_pass+0x5a>
					Keypad_Input();
				}
				LCD_ClearScreen();
 3bc:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_ClearScreen>
				Set_password();
 3c0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Set_password>
				break;
 3c4:	04 c0       	rjmp	.+8      	; 0x3ce <forget_pass+0x78>
			}
			else if (data2=='-'){
 3c6:	8d 32       	cpi	r24, 0x2D	; 45
 3c8:	a1 f6       	brne	.-88     	; 0x372 <forget_pass+0x1c>
				Keypad_Flag=0;
 3ca:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Keypad_Flag>
				break;
			}
		}
	}
	Main_Menu();
 3ce:	0e 94 9c 01 	call	0x338	; 0x338 <Main_Menu>
 3d2:	08 95       	ret

000003d4 <KEYPAD_voidInit>:
#include <util/delay.h>

u8 KEYPAD_CHARACTERS[5][5] = {{'7','8','9','/'},{'4','5','6','X'},{'1','2','3','-'}, {'f','0','=','+'}};
	
void KEYPAD_voidInit(){
	DIO_voidSetPortDirection(KEYPAD_PORT,0x0F);
 3d4:	6f e0       	ldi	r22, 0x0F	; 15
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <DIO_voidSetPortDirection>
	DIO_voidSetPortValue(KEYPAD_PORT,0);
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_voidSetPortValue>
 3e4:	08 95       	ret

000003e6 <KEYPAD_u8ReadButton>:
}


u8 KEYPAD_u8ReadButton(u8 row, u8 col){
	
	return KEYPAD_CHARACTERS[row][col];
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	fc 01       	movw	r30, r24
 3ea:	ee 0f       	add	r30, r30
 3ec:	ff 1f       	adc	r31, r31
 3ee:	ee 0f       	add	r30, r30
 3f0:	ff 1f       	adc	r31, r31
 3f2:	e8 0f       	add	r30, r24
 3f4:	f9 1f       	adc	r31, r25
 3f6:	e0 5a       	subi	r30, 0xA0	; 160
 3f8:	ff 4f       	sbci	r31, 0xFF	; 255
 3fa:	e6 0f       	add	r30, r22
 3fc:	f1 1d       	adc	r31, r1
	
}
 3fe:	80 81       	ld	r24, Z
 400:	08 95       	ret

00000402 <Keypad_Input>:

/*to input the signals from the keypad to detect input letters*/
void Keypad_Input(){
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
	for(u8 Row = KEYPAD_ROW0; Row<=KEYPAD_ROW3; Row++){
 406:	d0 e0       	ldi	r29, 0x00	; 0
 408:	30 c0       	rjmp	.+96     	; 0x46a <Keypad_Input+0x68>
		DIO_voidSetPinValue(KEYPAD_PORT,Row,1);
 40a:	41 e0       	ldi	r20, 0x01	; 1
 40c:	6d 2f       	mov	r22, r29
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_voidSetPinValue>
		for(u8 Col = KEYPAD_COL0 ; Col <= KEYPAD_COL3 ; Col++){
 414:	c4 e0       	ldi	r28, 0x04	; 4
 416:	1b c0       	rjmp	.+54     	; 0x44e <Keypad_Input+0x4c>
			if(DIO_u8GetPinValue(KEYPAD_PORT,Col)){
 418:	6c 2f       	mov	r22, r28
 41a:	82 e0       	ldi	r24, 0x02	; 2
 41c:	0e 94 1b 04 	call	0x836	; 0x836 <DIO_u8GetPinValue>
 420:	88 23       	and	r24, r24
 422:	a1 f0       	breq	.+40     	; 0x44c <Keypad_Input+0x4a>
				while(DIO_u8GetPinValue(KEYPAD_PORT,Col)){
 424:	6c 2f       	mov	r22, r28
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	0e 94 1b 04 	call	0x836	; 0x836 <DIO_u8GetPinValue>
 42c:	81 11       	cpse	r24, r1
 42e:	fa cf       	rjmp	.-12     	; 0x424 <Keypad_Input+0x22>
					continue;
				}
				Keypad_Flag=1;
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Keypad_Flag>
				Keypad_Row = Row;
 436:	d0 93 04 01 	sts	0x0104, r29	; 0x800104 <Keypad_Row>
				Keypad_Col = Col - 4;
 43a:	c4 50       	subi	r28, 0x04	; 4
 43c:	c0 93 0f 01 	sts	0x010F, r28	; 0x80010f <Keypad_Col>
				DIO_voidSetPinValue(KEYPAD_PORT,Row,PIN_LOW);
 440:	40 e0       	ldi	r20, 0x00	; 0
 442:	6d 2f       	mov	r22, r29
 444:	82 e0       	ldi	r24, 0x02	; 2
 446:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_voidSetPinValue>
				return;
 44a:	11 c0       	rjmp	.+34     	; 0x46e <Keypad_Input+0x6c>

/*to input the signals from the keypad to detect input letters*/
void Keypad_Input(){
	for(u8 Row = KEYPAD_ROW0; Row<=KEYPAD_ROW3; Row++){
		DIO_voidSetPinValue(KEYPAD_PORT,Row,1);
		for(u8 Col = KEYPAD_COL0 ; Col <= KEYPAD_COL3 ; Col++){
 44c:	cf 5f       	subi	r28, 0xFF	; 255
 44e:	c8 30       	cpi	r28, 0x08	; 8
 450:	18 f3       	brcs	.-58     	; 0x418 <Keypad_Input+0x16>
				Keypad_Col = Col - 4;
				DIO_voidSetPinValue(KEYPAD_PORT,Row,PIN_LOW);
				return;
			}
		}
		DIO_voidSetPinValue(KEYPAD_PORT,Row,PIN_LOW);
 452:	40 e0       	ldi	r20, 0x00	; 0
 454:	6d 2f       	mov	r22, r29
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_voidSetPinValue>
 45c:	8f e0       	ldi	r24, 0x0F	; 15
 45e:	97 e2       	ldi	r25, 0x27	; 39
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <Keypad_Input+0x5e>
 464:	00 c0       	rjmp	.+0      	; 0x466 <Keypad_Input+0x64>
 466:	00 00       	nop
	
}

/*to input the signals from the keypad to detect input letters*/
void Keypad_Input(){
	for(u8 Row = KEYPAD_ROW0; Row<=KEYPAD_ROW3; Row++){
 468:	df 5f       	subi	r29, 0xFF	; 255
 46a:	d4 30       	cpi	r29, 0x04	; 4
 46c:	70 f2       	brcs	.-100    	; 0x40a <Keypad_Input+0x8>
			}
		}
		DIO_voidSetPinValue(KEYPAD_PORT,Row,PIN_LOW);
		_delay_ms(5);
	}
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <LCD_voidEnableFunction>:
	LCD_voidEnableFunction();
	_delay_ms(10);
}

void LCD_voidEnableFunction(void){
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E,PIN_HIGH);
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	62 e0       	ldi	r22, 0x02	; 2
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_voidSetPinValue>
 47e:	8f ec       	ldi	r24, 0xCF	; 207
 480:	97 e0       	ldi	r25, 0x07	; 7
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <LCD_voidEnableFunction+0xe>
 486:	00 c0       	rjmp	.+0      	; 0x488 <LCD_voidEnableFunction+0x14>
 488:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E,PIN_LOW);
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	62 e0       	ldi	r22, 0x02	; 2
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_voidSetPinValue>
 494:	8f ec       	ldi	r24, 0xCF	; 207
 496:	97 e0       	ldi	r25, 0x07	; 7
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <LCD_voidEnableFunction+0x24>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <LCD_voidEnableFunction+0x2a>
 49e:	00 00       	nop
 4a0:	08 95       	ret

000004a2 <LCD_voidSendCommand>:
	LCD_voidSendCommand(LCD_DisplayClr);
	LCD_voidSendCommand(LCD_EntryModeSet);
	LCD_voidSendCommand(LCD_CursorStart);
}

void LCD_voidSendCommand(u8 command){
 4a2:	cf 93       	push	r28
 4a4:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue (LCD_CONTROL_PORT,LCD_RS,PIN_LOW);
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	63 e0       	ldi	r22, 0x03	; 3
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_CONTROL_PORT,LCD_RW,PIN_LOW);
 4b0:	40 e0       	ldi	r20, 0x00	; 0
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT,command);
 4ba:	6c 2f       	mov	r22, r28
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_voidSetPortValue>
	LCD_voidEnableFunction();
 4c2:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_voidEnableFunction>
 4c6:	8f e1       	ldi	r24, 0x1F	; 31
 4c8:	9e e4       	ldi	r25, 0x4E	; 78
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <LCD_voidSendCommand+0x28>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <LCD_voidSendCommand+0x2e>
 4d0:	00 00       	nop
	
	_delay_ms(10);
}
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <LCD_voidInit>:
 4d6:	2f ef       	ldi	r18, 0xFF	; 255
 4d8:	89 ef       	ldi	r24, 0xF9	; 249
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	21 50       	subi	r18, 0x01	; 1
 4de:	80 40       	sbci	r24, 0x00	; 0
 4e0:	90 40       	sbci	r25, 0x00	; 0
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <LCD_voidInit+0x6>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <LCD_voidInit+0x10>
 4e6:	00 00       	nop
#include <util/delay.h>


void LCD_voidInit(void){
	_delay_ms(40);
	DIO_voidSetPortDirection(LCD_CONTROL_PORT,0xFF);
 4e8:	6f ef       	ldi	r22, 0xFF	; 255
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <DIO_voidSetPortDirection>
	DIO_voidSetPortDirection(LCD_DATA_PORT,0xFF);
 4f0:	6f ef       	ldi	r22, 0xFF	; 255
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <DIO_voidSetPortDirection>
	
	LCD_voidSendCommand(LCD_FunctionSet);
 4f8:	88 e3       	ldi	r24, 0x38	; 56
 4fa:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_voidSendCommand>
	LCD_voidSendCommand(LCD_Display);
 4fe:	8c e0       	ldi	r24, 0x0C	; 12
 500:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_voidSendCommand>
	LCD_voidSendCommand(LCD_DisplayClr);
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_voidSendCommand>
	LCD_voidSendCommand(LCD_EntryModeSet);
 50a:	86 e0       	ldi	r24, 0x06	; 6
 50c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_voidSendCommand>
	LCD_voidSendCommand(LCD_CursorStart);
 510:	80 e8       	ldi	r24, 0x80	; 128
 512:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_voidSendCommand>
 516:	08 95       	ret

00000518 <LCD_voidSendData>:
	LCD_voidEnableFunction();
	
	_delay_ms(10);
}

void LCD_voidSendData(u8 data){
 518:	cf 93       	push	r28
 51a:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue (LCD_CONTROL_PORT,LCD_RS,PIN_HIGH);
 51c:	41 e0       	ldi	r20, 0x01	; 1
 51e:	63 e0       	ldi	r22, 0x03	; 3
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_CONTROL_PORT,LCD_RW,PIN_LOW);
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT ,data);
 530:	6c 2f       	mov	r22, r28
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_voidSetPortValue>
	LCD_voidEnableFunction();
 538:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_voidEnableFunction>
 53c:	8f e1       	ldi	r24, 0x1F	; 31
 53e:	9e e4       	ldi	r25, 0x4E	; 78
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <LCD_voidSendData+0x28>
 544:	00 c0       	rjmp	.+0      	; 0x546 <LCD_voidSendData+0x2e>
 546:	00 00       	nop
	_delay_ms(10);
}
 548:	cf 91       	pop	r28
 54a:	08 95       	ret

0000054c <LCD_SendString>:
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E,PIN_LOW);
	_delay_ms(1);
}

void LCD_SendString(const u8 *Str){
 54c:	0f 93       	push	r16
 54e:	1f 93       	push	r17
 550:	cf 93       	push	r28
 552:	8c 01       	movw	r16, r24
	u8 Str_iterator=0;
 554:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[Str_iterator]!='\0'){
 556:	03 c0       	rjmp	.+6      	; 0x55e <LCD_SendString+0x12>
		LCD_voidSendData(Str[Str_iterator++]);
 558:	cf 5f       	subi	r28, 0xFF	; 255
 55a:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_voidSendData>
	_delay_ms(1);
}

void LCD_SendString(const u8 *Str){
	u8 Str_iterator=0;
	while(Str[Str_iterator]!='\0'){
 55e:	f8 01       	movw	r30, r16
 560:	ec 0f       	add	r30, r28
 562:	f1 1d       	adc	r31, r1
 564:	80 81       	ld	r24, Z
 566:	81 11       	cpse	r24, r1
 568:	f7 cf       	rjmp	.-18     	; 0x558 <LCD_SendString+0xc>
		LCD_voidSendData(Str[Str_iterator++]);
	}
	}
 56a:	cf 91       	pop	r28
 56c:	1f 91       	pop	r17
 56e:	0f 91       	pop	r16
 570:	08 95       	ret

00000572 <LCD_ClearScreen>:

void LCD_ClearScreen(void){
	LCD_voidSendCommand(LCD_DisplayClr);
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_voidSendCommand>
	LCD_voidSendCommand(LCD_CursorStart);
 578:	80 e8       	ldi	r24, 0x80	; 128
 57a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_voidSendCommand>
 57e:	08 95       	ret

00000580 <LCD_MoveCursor>:
	
}

void LCD_MoveCursor(u8 row,u8 col){
	if(row>1 || row<0 || col>15 || col<0){
 580:	82 30       	cpi	r24, 0x02	; 2
 582:	10 f4       	brcc	.+4      	; 0x588 <LCD_MoveCursor+0x8>
 584:	60 31       	cpi	r22, 0x10	; 16
 586:	20 f0       	brcs	.+8      	; 0x590 <LCD_MoveCursor+0x10>
		LCD_voidSendCommand(LCD_CursorStart);
 588:	80 e8       	ldi	r24, 0x80	; 128
 58a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_voidSendCommand>
 58e:	0d c0       	rjmp	.+26     	; 0x5aa <LCD_MoveCursor+0x2a>
	}
	else if (row==0){
 590:	81 11       	cpse	r24, r1
 592:	05 c0       	rjmp	.+10     	; 0x59e <LCD_MoveCursor+0x1e>
		LCD_voidSendCommand(LCD_CursorStart+col);
 594:	80 e8       	ldi	r24, 0x80	; 128
 596:	86 0f       	add	r24, r22
 598:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_voidSendCommand>
 59c:	06 c0       	rjmp	.+12     	; 0x5aa <LCD_MoveCursor+0x2a>
	}
	else if (row==1){
 59e:	81 30       	cpi	r24, 0x01	; 1
 5a0:	21 f4       	brne	.+8      	; 0x5aa <LCD_MoveCursor+0x2a>
		LCD_voidSendCommand(LCD_CursorStart+64+col);
 5a2:	80 ec       	ldi	r24, 0xC0	; 192
 5a4:	86 0f       	add	r24, r22
 5a6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_voidSendCommand>
 5aa:	8f e9       	ldi	r24, 0x9F	; 159
 5ac:	9f e0       	ldi	r25, 0x0F	; 15
 5ae:	01 97       	sbiw	r24, 0x01	; 1
 5b0:	f1 f7       	brne	.-4      	; 0x5ae <LCD_MoveCursor+0x2e>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <LCD_MoveCursor+0x34>
 5b4:	00 00       	nop
 5b6:	08 95       	ret

000005b8 <LM35_getTemperature>:


u8 Conversion_Unit = 100;   // the unit is max temp / max voltage of LM035

u8 LM35_getTemperature(u16 digital_signal){
	u16 signal = digital_signal * Conversion_Unit * ADC_REF_VOLT_VALUE;
 5b8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <Conversion_Unit>
 5bc:	ac 01       	movw	r20, r24
 5be:	24 9f       	mul	r18, r20
 5c0:	c0 01       	movw	r24, r0
 5c2:	25 9f       	mul	r18, r21
 5c4:	90 0d       	add	r25, r0
 5c6:	11 24       	eor	r1, r1
 5c8:	9c 01       	movw	r18, r24
 5ca:	22 0f       	add	r18, r18
 5cc:	33 1f       	adc	r19, r19
 5ce:	22 0f       	add	r18, r18
 5d0:	33 1f       	adc	r19, r19
 5d2:	82 0f       	add	r24, r18
 5d4:	93 1f       	adc	r25, r19
	u8 temperature = signal / ADC_MAXIMUM_VALUE;
 5d6:	6f ef       	ldi	r22, 0xFF	; 255
 5d8:	73 e0       	ldi	r23, 0x03	; 3
 5da:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__udivmodhi4>
 5de:	86 2f       	mov	r24, r22
	return temperature;
}
 5e0:	08 95       	ret

000005e2 <ADC_readChannel_single_conv>:
	while(GetBit(ADCSRA,ADCSRA_ADIF)==0);
	
	SetBit(ADCSRA,ADCSRA_ADIF);
	
	return (ADCL) | (ADCH<<8);
}
 5e2:	97 b1       	in	r25, 0x07	; 7
 5e4:	90 7e       	andi	r25, 0xE0	; 224
 5e6:	97 b9       	out	0x07, r25	; 7
 5e8:	97 b1       	in	r25, 0x07	; 7
 5ea:	89 2b       	or	r24, r25
 5ec:	87 b9       	out	0x07, r24	; 7
 5ee:	86 b1       	in	r24, 0x06	; 6
 5f0:	80 64       	ori	r24, 0x40	; 64
 5f2:	86 b9       	out	0x06, r24	; 6
 5f4:	86 b1       	in	r24, 0x06	; 6
 5f6:	86 b1       	in	r24, 0x06	; 6
 5f8:	80 61       	ori	r24, 0x10	; 16
 5fa:	86 b9       	out	0x06, r24	; 6
 5fc:	24 b1       	in	r18, 0x04	; 4
 5fe:	85 b1       	in	r24, 0x05	; 5
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	98 2f       	mov	r25, r24
 604:	88 27       	eor	r24, r24
 606:	82 2b       	or	r24, r18
 608:	08 95       	ret

0000060a <ADC_enable>:

void ADC_enable(){
	SetBit(ADCSRA,ADCSRA_ADEN);
 60a:	86 b1       	in	r24, 0x06	; 6
 60c:	80 68       	ori	r24, 0x80	; 128
 60e:	86 b9       	out	0x06, r24	; 6
 610:	08 95       	ret

00000612 <ADC_init>:


#include "adc.h"

void ADC_init(u8 ADC_freq_Prescaler){
	ADMUX=0;                     //initialize the register with zero
 612:	17 b8       	out	0x07, r1	; 7
	
	ADMUX|=(ADC_ref_Type<<6);
 614:	97 b1       	in	r25, 0x07	; 7
 616:	97 b9       	out	0x07, r25	; 7
	
	ADCSRA = 0;
 618:	16 b8       	out	0x06, r1	; 6
	
	ADCSRA |= ADC_freq_Prescaler;
 61a:	96 b1       	in	r25, 0x06	; 6
 61c:	89 2b       	or	r24, r25
 61e:	86 b9       	out	0x06, r24	; 6
	
	SetBit(ADCSRA,ADCSRA_ADEN);
 620:	86 b1       	in	r24, 0x06	; 6
 622:	80 68       	ori	r24, 0x80	; 128
 624:	86 b9       	out	0x06, r24	; 6
	
	DIO_voidSetPinDirection(PORTA_ID,PIN0_ID,PIN_INPUT);
 626:	40 e0       	ldi	r20, 0x00	; 0
 628:	60 e0       	ldi	r22, 0x00	; 0
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_voidSetPinDirection>
	
	ADC_enable();
 630:	0e 94 05 03 	call	0x60a	; 0x60a <ADC_enable>
 634:	08 95       	ret

00000636 <DIO_voidSetPinDirection>:
 636:	41 11       	cpse	r20, r1
 638:	38 c0       	rjmp	.+112    	; 0x6aa <DIO_voidSetPinDirection+0x74>
 63a:	81 30       	cpi	r24, 0x01	; 1
 63c:	91 f0       	breq	.+36     	; 0x662 <DIO_voidSetPinDirection+0x2c>
 63e:	28 f0       	brcs	.+10     	; 0x64a <DIO_voidSetPinDirection+0x14>
 640:	82 30       	cpi	r24, 0x02	; 2
 642:	d9 f0       	breq	.+54     	; 0x67a <DIO_voidSetPinDirection+0x44>
 644:	83 30       	cpi	r24, 0x03	; 3
 646:	29 f1       	breq	.+74     	; 0x692 <DIO_voidSetPinDirection+0x5c>
 648:	08 95       	ret
 64a:	2a b3       	in	r18, 0x1a	; 26
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_voidSetPinDirection+0x20>
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	6a 95       	dec	r22
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_voidSetPinDirection+0x1c>
 65a:	80 95       	com	r24
 65c:	82 23       	and	r24, r18
 65e:	8a bb       	out	0x1a, r24	; 26
 660:	08 95       	ret
 662:	27 b3       	in	r18, 0x17	; 23
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_voidSetPinDirection+0x38>
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	6a 95       	dec	r22
 670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_voidSetPinDirection+0x34>
 672:	80 95       	com	r24
 674:	82 23       	and	r24, r18
 676:	87 bb       	out	0x17, r24	; 23
 678:	08 95       	ret
 67a:	24 b3       	in	r18, 0x14	; 20
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	02 c0       	rjmp	.+4      	; 0x686 <DIO_voidSetPinDirection+0x50>
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	6a 95       	dec	r22
 688:	e2 f7       	brpl	.-8      	; 0x682 <DIO_voidSetPinDirection+0x4c>
 68a:	80 95       	com	r24
 68c:	82 23       	and	r24, r18
 68e:	84 bb       	out	0x14, r24	; 20
 690:	08 95       	ret
 692:	21 b3       	in	r18, 0x11	; 17
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	02 c0       	rjmp	.+4      	; 0x69e <DIO_voidSetPinDirection+0x68>
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	6a 95       	dec	r22
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <DIO_voidSetPinDirection+0x64>
 6a2:	80 95       	com	r24
 6a4:	82 23       	and	r24, r18
 6a6:	81 bb       	out	0x11, r24	; 17
 6a8:	08 95       	ret
 6aa:	41 30       	cpi	r20, 0x01	; 1
 6ac:	99 f5       	brne	.+102    	; 0x714 <DIO_voidSetPinDirection+0xde>
 6ae:	81 30       	cpi	r24, 0x01	; 1
 6b0:	89 f0       	breq	.+34     	; 0x6d4 <DIO_voidSetPinDirection+0x9e>
 6b2:	28 f0       	brcs	.+10     	; 0x6be <DIO_voidSetPinDirection+0x88>
 6b4:	82 30       	cpi	r24, 0x02	; 2
 6b6:	c9 f0       	breq	.+50     	; 0x6ea <DIO_voidSetPinDirection+0xb4>
 6b8:	83 30       	cpi	r24, 0x03	; 3
 6ba:	11 f1       	breq	.+68     	; 0x700 <DIO_voidSetPinDirection+0xca>
 6bc:	08 95       	ret
 6be:	2a b3       	in	r18, 0x1a	; 26
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <DIO_voidSetPinDirection+0x94>
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	6a 95       	dec	r22
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <DIO_voidSetPinDirection+0x90>
 6ce:	82 2b       	or	r24, r18
 6d0:	8a bb       	out	0x1a, r24	; 26
 6d2:	08 95       	ret
 6d4:	27 b3       	in	r18, 0x17	; 23
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_voidSetPinDirection+0xaa>
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	6a 95       	dec	r22
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <DIO_voidSetPinDirection+0xa6>
 6e4:	82 2b       	or	r24, r18
 6e6:	87 bb       	out	0x17, r24	; 23
 6e8:	08 95       	ret
 6ea:	24 b3       	in	r18, 0x14	; 20
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <DIO_voidSetPinDirection+0xc0>
 6f2:	88 0f       	add	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	6a 95       	dec	r22
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <DIO_voidSetPinDirection+0xbc>
 6fa:	82 2b       	or	r24, r18
 6fc:	84 bb       	out	0x14, r24	; 20
 6fe:	08 95       	ret
 700:	21 b3       	in	r18, 0x11	; 17
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	02 c0       	rjmp	.+4      	; 0x70c <DIO_voidSetPinDirection+0xd6>
 708:	88 0f       	add	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	6a 95       	dec	r22
 70e:	e2 f7       	brpl	.-8      	; 0x708 <DIO_voidSetPinDirection+0xd2>
 710:	82 2b       	or	r24, r18
 712:	81 bb       	out	0x11, r24	; 17
 714:	08 95       	ret

00000716 <DIO_voidSetPinValue>:
 716:	41 11       	cpse	r20, r1
 718:	38 c0       	rjmp	.+112    	; 0x78a <DIO_voidSetPinValue+0x74>
 71a:	81 30       	cpi	r24, 0x01	; 1
 71c:	91 f0       	breq	.+36     	; 0x742 <DIO_voidSetPinValue+0x2c>
 71e:	28 f0       	brcs	.+10     	; 0x72a <DIO_voidSetPinValue+0x14>
 720:	82 30       	cpi	r24, 0x02	; 2
 722:	d9 f0       	breq	.+54     	; 0x75a <DIO_voidSetPinValue+0x44>
 724:	83 30       	cpi	r24, 0x03	; 3
 726:	29 f1       	breq	.+74     	; 0x772 <DIO_voidSetPinValue+0x5c>
 728:	08 95       	ret
 72a:	2b b3       	in	r18, 0x1b	; 27
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_voidSetPinValue+0x20>
 732:	88 0f       	add	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	6a 95       	dec	r22
 738:	e2 f7       	brpl	.-8      	; 0x732 <DIO_voidSetPinValue+0x1c>
 73a:	80 95       	com	r24
 73c:	82 23       	and	r24, r18
 73e:	8b bb       	out	0x1b, r24	; 27
 740:	08 95       	ret
 742:	28 b3       	in	r18, 0x18	; 24
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_voidSetPinValue+0x38>
 74a:	88 0f       	add	r24, r24
 74c:	99 1f       	adc	r25, r25
 74e:	6a 95       	dec	r22
 750:	e2 f7       	brpl	.-8      	; 0x74a <DIO_voidSetPinValue+0x34>
 752:	80 95       	com	r24
 754:	82 23       	and	r24, r18
 756:	88 bb       	out	0x18, r24	; 24
 758:	08 95       	ret
 75a:	25 b3       	in	r18, 0x15	; 21
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	02 c0       	rjmp	.+4      	; 0x766 <DIO_voidSetPinValue+0x50>
 762:	88 0f       	add	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	6a 95       	dec	r22
 768:	e2 f7       	brpl	.-8      	; 0x762 <DIO_voidSetPinValue+0x4c>
 76a:	80 95       	com	r24
 76c:	82 23       	and	r24, r18
 76e:	85 bb       	out	0x15, r24	; 21
 770:	08 95       	ret
 772:	22 b3       	in	r18, 0x12	; 18
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	02 c0       	rjmp	.+4      	; 0x77e <DIO_voidSetPinValue+0x68>
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	6a 95       	dec	r22
 780:	e2 f7       	brpl	.-8      	; 0x77a <DIO_voidSetPinValue+0x64>
 782:	80 95       	com	r24
 784:	82 23       	and	r24, r18
 786:	82 bb       	out	0x12, r24	; 18
 788:	08 95       	ret
 78a:	41 30       	cpi	r20, 0x01	; 1
 78c:	99 f5       	brne	.+102    	; 0x7f4 <DIO_voidSetPinValue+0xde>
 78e:	81 30       	cpi	r24, 0x01	; 1
 790:	89 f0       	breq	.+34     	; 0x7b4 <DIO_voidSetPinValue+0x9e>
 792:	28 f0       	brcs	.+10     	; 0x79e <DIO_voidSetPinValue+0x88>
 794:	82 30       	cpi	r24, 0x02	; 2
 796:	c9 f0       	breq	.+50     	; 0x7ca <DIO_voidSetPinValue+0xb4>
 798:	83 30       	cpi	r24, 0x03	; 3
 79a:	11 f1       	breq	.+68     	; 0x7e0 <DIO_voidSetPinValue+0xca>
 79c:	08 95       	ret
 79e:	2b b3       	in	r18, 0x1b	; 27
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <DIO_voidSetPinValue+0x94>
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	6a 95       	dec	r22
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <DIO_voidSetPinValue+0x90>
 7ae:	82 2b       	or	r24, r18
 7b0:	8b bb       	out	0x1b, r24	; 27
 7b2:	08 95       	ret
 7b4:	28 b3       	in	r18, 0x18	; 24
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <DIO_voidSetPinValue+0xaa>
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	6a 95       	dec	r22
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <DIO_voidSetPinValue+0xa6>
 7c4:	82 2b       	or	r24, r18
 7c6:	88 bb       	out	0x18, r24	; 24
 7c8:	08 95       	ret
 7ca:	25 b3       	in	r18, 0x15	; 21
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <DIO_voidSetPinValue+0xc0>
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	6a 95       	dec	r22
 7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <DIO_voidSetPinValue+0xbc>
 7da:	82 2b       	or	r24, r18
 7dc:	85 bb       	out	0x15, r24	; 21
 7de:	08 95       	ret
 7e0:	22 b3       	in	r18, 0x12	; 18
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <DIO_voidSetPinValue+0xd6>
 7e8:	88 0f       	add	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	6a 95       	dec	r22
 7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <DIO_voidSetPinValue+0xd2>
 7f0:	82 2b       	or	r24, r18
 7f2:	82 bb       	out	0x12, r24	; 18
 7f4:	08 95       	ret

000007f6 <DIO_voidSetPortDirection>:
 7f6:	81 30       	cpi	r24, 0x01	; 1
 7f8:	41 f0       	breq	.+16     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7fa:	28 f0       	brcs	.+10     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7fc:	82 30       	cpi	r24, 0x02	; 2
 7fe:	39 f0       	breq	.+14     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 800:	83 30       	cpi	r24, 0x03	; 3
 802:	39 f0       	breq	.+14     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 804:	08 95       	ret
 806:	6a bb       	out	0x1a, r22	; 26
 808:	08 95       	ret
 80a:	67 bb       	out	0x17, r22	; 23
 80c:	08 95       	ret
 80e:	64 bb       	out	0x14, r22	; 20
 810:	08 95       	ret
 812:	61 bb       	out	0x11, r22	; 17
 814:	08 95       	ret

00000816 <DIO_voidSetPortValue>:
 816:	81 30       	cpi	r24, 0x01	; 1
 818:	41 f0       	breq	.+16     	; 0x82a <DIO_voidSetPortValue+0x14>
 81a:	28 f0       	brcs	.+10     	; 0x826 <DIO_voidSetPortValue+0x10>
 81c:	82 30       	cpi	r24, 0x02	; 2
 81e:	39 f0       	breq	.+14     	; 0x82e <DIO_voidSetPortValue+0x18>
 820:	83 30       	cpi	r24, 0x03	; 3
 822:	39 f0       	breq	.+14     	; 0x832 <DIO_voidSetPortValue+0x1c>
 824:	08 95       	ret
 826:	6b bb       	out	0x1b, r22	; 27
 828:	08 95       	ret
 82a:	68 bb       	out	0x18, r22	; 24
 82c:	08 95       	ret
 82e:	65 bb       	out	0x15, r22	; 21
 830:	08 95       	ret
 832:	62 bb       	out	0x12, r22	; 18
 834:	08 95       	ret

00000836 <DIO_u8GetPinValue>:
 836:	81 30       	cpi	r24, 0x01	; 1
 838:	81 f0       	breq	.+32     	; 0x85a <DIO_u8GetPinValue+0x24>
 83a:	28 f0       	brcs	.+10     	; 0x846 <DIO_u8GetPinValue+0x10>
 83c:	82 30       	cpi	r24, 0x02	; 2
 83e:	b9 f0       	breq	.+46     	; 0x86e <__stack+0xf>
 840:	83 30       	cpi	r24, 0x03	; 3
 842:	f9 f0       	breq	.+62     	; 0x882 <__stack+0x23>
 844:	27 c0       	rjmp	.+78     	; 0x894 <__stack+0x35>
 846:	89 b3       	in	r24, 0x19	; 25
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <DIO_u8GetPinValue+0x1a>
 84c:	95 95       	asr	r25
 84e:	87 95       	ror	r24
 850:	6a 95       	dec	r22
 852:	e2 f7       	brpl	.-8      	; 0x84c <DIO_u8GetPinValue+0x16>
 854:	98 2f       	mov	r25, r24
 856:	91 70       	andi	r25, 0x01	; 1
 858:	1d c0       	rjmp	.+58     	; 0x894 <__stack+0x35>
 85a:	86 b3       	in	r24, 0x16	; 22
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
 860:	95 95       	asr	r25
 862:	87 95       	ror	r24
 864:	6a 95       	dec	r22
 866:	e2 f7       	brpl	.-8      	; 0x860 <__stack+0x1>
 868:	98 2f       	mov	r25, r24
 86a:	91 70       	andi	r25, 0x01	; 1
 86c:	13 c0       	rjmp	.+38     	; 0x894 <__stack+0x35>
 86e:	83 b3       	in	r24, 0x13	; 19
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
 874:	95 95       	asr	r25
 876:	87 95       	ror	r24
 878:	6a 95       	dec	r22
 87a:	e2 f7       	brpl	.-8      	; 0x874 <__stack+0x15>
 87c:	98 2f       	mov	r25, r24
 87e:	91 70       	andi	r25, 0x01	; 1
 880:	09 c0       	rjmp	.+18     	; 0x894 <__stack+0x35>
 882:	80 b3       	in	r24, 0x10	; 16
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	02 c0       	rjmp	.+4      	; 0x88c <__stack+0x2d>
 888:	95 95       	asr	r25
 88a:	87 95       	ror	r24
 88c:	6a 95       	dec	r22
 88e:	e2 f7       	brpl	.-8      	; 0x888 <__stack+0x29>
 890:	98 2f       	mov	r25, r24
 892:	91 70       	andi	r25, 0x01	; 1
 894:	89 2f       	mov	r24, r25
 896:	08 95       	ret

00000898 <TIMER1_vInit>:

void TIMER1_vInit(void)
{
	#if( TIMER1_MODE == TIMER1_NORMAL_MODE)
	#elif( TIMER1_MODE == TIMER1_FASTPWM_COMPAREMATCH_MODE )
	SetBit(TCCR1A,WGM10);
 898:	8f b5       	in	r24, 0x2f	; 47
 89a:	81 60       	ori	r24, 0x01	; 1
 89c:	8f bd       	out	0x2f, r24	; 47
	SetBit(TCCR1A,WGM11);
 89e:	8f b5       	in	r24, 0x2f	; 47
 8a0:	82 60       	ori	r24, 0x02	; 2
 8a2:	8f bd       	out	0x2f, r24	; 47
	SetBit(TCCR1B,WGM12);
 8a4:	8e b5       	in	r24, 0x2e	; 46
 8a6:	88 60       	ori	r24, 0x08	; 8
 8a8:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,WGM13);
 8aa:	8e b5       	in	r24, 0x2e	; 46
 8ac:	80 61       	ori	r24, 0x10	; 16
 8ae:	8e bd       	out	0x2e, r24	; 46
 8b0:	08 95       	ret

000008b2 <TIMER1_vStart>:
	#endif
}

void TIMER1_vStart(void)
{	
	TCNT1L=0x0;
 8b2:	1c bc       	out	0x2c, r1	; 44
	TCNT1H=0x0;
 8b4:	1d bc       	out	0x2d, r1	; 45
	SetBit(TCCR1B,CS10);
	ClrBit(TCCR1B,CS11);
	ClrBit(TCCR1B,CS12);
	
	#elif( TIMER1_PRESCALER ==  TIMER1_PRESCALER_8 )
	ClrBit(TCCR1B,CS10);
 8b6:	8e b5       	in	r24, 0x2e	; 46
 8b8:	8e 7f       	andi	r24, 0xFE	; 254
 8ba:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,CS11);
 8bc:	8e b5       	in	r24, 0x2e	; 46
 8be:	82 60       	ori	r24, 0x02	; 2
 8c0:	8e bd       	out	0x2e, r24	; 46
	ClrBit(TCCR1B,CS12);
 8c2:	8e b5       	in	r24, 0x2e	; 46
 8c4:	8b 7f       	andi	r24, 0xFB	; 251
 8c6:	8e bd       	out	0x2e, r24	; 46
 8c8:	08 95       	ret

000008ca <Timer1_SetFastPWMCompareMatch>:

	#endif
}

void Timer1_SetFastPWMCompareMatch(f32 DutyCycle)
{
 8ca:	cf 92       	push	r12
 8cc:	df 92       	push	r13
 8ce:	ef 92       	push	r14
 8d0:	ff 92       	push	r15
 8d2:	6b 01       	movw	r12, r22
 8d4:	7c 01       	movw	r14, r24
	DIO_voidSetPinDirection(PORTD_ID,PIN5_ID,PIN_OUTPUT);
 8d6:	41 e0       	ldi	r20, 0x01	; 1
 8d8:	65 e0       	ldi	r22, 0x05	; 5
 8da:	83 e0       	ldi	r24, 0x03	; 3
 8dc:	0e 94 1b 03 	call	0x636	; 0x636 <DIO_voidSetPinDirection>
	
	#if( TIMER1_MODE ==	TIMER1_FASTPWM_COMPAREMATCH_MODE)
	
	#if( TIMER1_OC1_MODE == TIMER1_OC1_PWM_NON_INVERTING)
	SetBit(TCCR1A,COM1A1);
 8e0:	8f b5       	in	r24, 0x2f	; 47
 8e2:	80 68       	ori	r24, 0x80	; 128
 8e4:	8f bd       	out	0x2f, r24	; 47
	ClrBit(TCCR1A,COM1A0);
 8e6:	8f b5       	in	r24, 0x2f	; 47
 8e8:	8f 7b       	andi	r24, 0xBF	; 191
 8ea:	8f bd       	out	0x2f, r24	; 47
	u16 limit = abs(((65536*DutyCycle)/100)-1);
 8ec:	20 e0       	ldi	r18, 0x00	; 0
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	40 e8       	ldi	r20, 0x80	; 128
 8f2:	57 e4       	ldi	r21, 0x47	; 71
 8f4:	c7 01       	movw	r24, r14
 8f6:	b6 01       	movw	r22, r12
 8f8:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__mulsf3>
 8fc:	20 e0       	ldi	r18, 0x00	; 0
 8fe:	30 e0       	ldi	r19, 0x00	; 0
 900:	48 ec       	ldi	r20, 0xC8	; 200
 902:	52 e4       	ldi	r21, 0x42	; 66
 904:	0e 94 61 05 	call	0xac2	; 0xac2 <__divsf3>
 908:	20 e0       	ldi	r18, 0x00	; 0
 90a:	30 e0       	ldi	r19, 0x00	; 0
 90c:	40 e8       	ldi	r20, 0x80	; 128
 90e:	5f e3       	ldi	r21, 0x3F	; 63
 910:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__subsf3>
 914:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fixsfsi>
 918:	9b 01       	movw	r18, r22
 91a:	77 23       	and	r23, r23
 91c:	24 f4       	brge	.+8      	; 0x926 <Timer1_SetFastPWMCompareMatch+0x5c>
 91e:	22 27       	eor	r18, r18
 920:	33 27       	eor	r19, r19
 922:	26 1b       	sub	r18, r22
 924:	37 0b       	sbc	r19, r23
	OCR1AH = (limit>>8);
 926:	3b bd       	out	0x2b, r19	; 43
	OCR1AL = (limit & 0xFF); 
 928:	2a bd       	out	0x2a, r18	; 42
	#endif
	#endif
}
 92a:	ff 90       	pop	r15
 92c:	ef 90       	pop	r14
 92e:	df 90       	pop	r13
 930:	cf 90       	pop	r12
 932:	08 95       	ret

00000934 <UART_init>:
{
	u16 ubrr_value = 0;

	/* U2X = 1 for double transmission speed */
	#if (UART_TRANSMISSION_SPEED == UART_DOUBLE_SPEED)
	SetBit(UCSRA_REG ,U2X_BIT);
 934:	2b b1       	in	r18, 0x0b	; 11
 936:	22 60       	ori	r18, 0x02	; 2
 938:	2b b9       	out	0x0b, r18	; 11
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	//UCSRB_REG = 0;
	SetBit(UCSRB_REG,RXEN_BIT);
 93a:	2a b1       	in	r18, 0x0a	; 10
 93c:	20 61       	ori	r18, 0x10	; 16
 93e:	2a b9       	out	0x0a, r18	; 10
	SetBit(UCSRB_REG,TXEN_BIT);
 940:	2a b1       	in	r18, 0x0a	; 10
 942:	28 60       	ori	r18, 0x08	; 8
 944:	2a b9       	out	0x0a, r18	; 10
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	SetBit(UCSRC_REG,URSEL_BIT);
 946:	20 b5       	in	r18, 0x20	; 32
 948:	20 68       	ori	r18, 0x80	; 128
 94a:	20 bd       	out	0x20, r18	; 32
	SetBit(UCSRC_REG,UCSZ0_BIT);
 94c:	20 b5       	in	r18, 0x20	; 32
 94e:	22 60       	ori	r18, 0x02	; 2
 950:	20 bd       	out	0x20, r18	; 32
	SetBit(UCSRC_REG,UCSZ1_BIT);
 952:	20 b5       	in	r18, 0x20	; 32
 954:	24 60       	ori	r18, 0x04	; 4
 956:	20 bd       	out	0x20, r18	; 32
	
	/* Calculate the UBRR register value */
	
	#if (UART_TRANSMISSION_SPEED == UART_DOUBLE_SPEED)
	ubrr_value = (u16)(((F_CPU / (baud_rate * 8UL))) - 1);
 958:	dc 01       	movw	r26, r24
 95a:	cb 01       	movw	r24, r22
 95c:	88 0f       	add	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	aa 1f       	adc	r26, r26
 962:	bb 1f       	adc	r27, r27
 964:	88 0f       	add	r24, r24
 966:	99 1f       	adc	r25, r25
 968:	aa 1f       	adc	r26, r26
 96a:	bb 1f       	adc	r27, r27
 96c:	9c 01       	movw	r18, r24
 96e:	ad 01       	movw	r20, r26
 970:	22 0f       	add	r18, r18
 972:	33 1f       	adc	r19, r19
 974:	44 1f       	adc	r20, r20
 976:	55 1f       	adc	r21, r21
 978:	60 e0       	ldi	r22, 0x00	; 0
 97a:	72 e1       	ldi	r23, 0x12	; 18
 97c:	8a e7       	ldi	r24, 0x7A	; 122
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__udivmodsi4>
 984:	21 50       	subi	r18, 0x01	; 1
 986:	31 09       	sbc	r19, r1
	#endif
	
	 //use 16UL if you're not using double speed mode

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	ClrBit(UBRRH_REG,URSEL_BIT);
 988:	80 b5       	in	r24, 0x20	; 32
 98a:	8f 77       	andi	r24, 0x7F	; 127
 98c:	80 bd       	out	0x20, r24	; 32
	UBRRH_REG = ubrr_value>>8;
 98e:	30 bd       	out	0x20, r19	; 32
	UBRRL_REG = ubrr_value;
 990:	29 b9       	out	0x09, r18	; 9
 992:	08 95       	ret

00000994 <UART_sendByte>:
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const u8 data)
{
	while(!GetBit(UCSRA_REG,UDRE_BIT));
 994:	9b b1       	in	r25, 0x0b	; 11
 996:	92 95       	swap	r25
 998:	96 95       	lsr	r25
 99a:	97 70       	andi	r25, 0x07	; 7
 99c:	d9 f3       	breq	.-10     	; 0x994 <UART_sendByte>

	UDR_REG = data;
 99e:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9a0:	87 ec       	ldi	r24, 0xC7	; 199
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	01 97       	sbiw	r24, 0x01	; 1
 9a6:	f1 f7       	brne	.-4      	; 0x9a4 <UART_sendByte+0x10>
 9a8:	00 c0       	rjmp	.+0      	; 0x9aa <UART_sendByte+0x16>
 9aa:	00 00       	nop
 9ac:	08 95       	ret

000009ae <UART_recieveByte>:
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
u8 UART_recieveByte(void)
{
	while(!GetBit(UCSRA_REG,RXC_BIT));
 9ae:	5f 9b       	sbis	0x0b, 7	; 11
 9b0:	fe cf       	rjmp	.-4      	; 0x9ae <UART_recieveByte>
	
    return UDR_REG;		
 9b2:	8c b1       	in	r24, 0x0c	; 12
}
 9b4:	08 95       	ret

000009b6 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const u8 *str)
{
 9b6:	0f 93       	push	r16
 9b8:	1f 93       	push	r17
 9ba:	cf 93       	push	r28
 9bc:	8c 01       	movw	r16, r24
	u8 Str_iterator = 0;
 9be:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[Str_iterator]!='\0')
 9c0:	09 c0       	rjmp	.+18     	; 0x9d4 <UART_sendString+0x1e>
	{
		UART_sendByte(str[Str_iterator]);
 9c2:	0e 94 ca 04 	call	0x994	; 0x994 <UART_sendByte>
		Str_iterator++;
 9c6:	cf 5f       	subi	r28, 0xFF	; 255
 9c8:	87 ec       	ldi	r24, 0xC7	; 199
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	01 97       	sbiw	r24, 0x01	; 1
 9ce:	f1 f7       	brne	.-4      	; 0x9cc <UART_sendString+0x16>
 9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <UART_sendString+0x1c>
 9d2:	00 00       	nop
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const u8 *str)
{
	u8 Str_iterator = 0;
	while (str[Str_iterator]!='\0')
 9d4:	f8 01       	movw	r30, r16
 9d6:	ec 0f       	add	r30, r28
 9d8:	f1 1d       	adc	r31, r1
 9da:	80 81       	ld	r24, Z
 9dc:	81 11       	cpse	r24, r1
 9de:	f1 cf       	rjmp	.-30     	; 0x9c2 <UART_sendString+0xc>
		UART_sendByte(str[Str_iterator]);
		Str_iterator++;
		_delay_us(100);
	}
	//UART_sendByte('#'); //to indicate that this is the end of the string
}
 9e0:	cf 91       	pop	r28
 9e2:	1f 91       	pop	r17
 9e4:	0f 91       	pop	r16
 9e6:	08 95       	ret

000009e8 <__subsf3>:
 9e8:	50 58       	subi	r21, 0x80	; 128

000009ea <__addsf3>:
 9ea:	bb 27       	eor	r27, r27
 9ec:	aa 27       	eor	r26, r26
 9ee:	0e 94 0c 05 	call	0xa18	; 0xa18 <__addsf3x>
 9f2:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_round>
 9f6:	0e 94 12 06 	call	0xc24	; 0xc24 <__fp_pscA>
 9fa:	38 f0       	brcs	.+14     	; 0xa0a <__addsf3+0x20>
 9fc:	0e 94 19 06 	call	0xc32	; 0xc32 <__fp_pscB>
 a00:	20 f0       	brcs	.+8      	; 0xa0a <__addsf3+0x20>
 a02:	39 f4       	brne	.+14     	; 0xa12 <__addsf3+0x28>
 a04:	9f 3f       	cpi	r25, 0xFF	; 255
 a06:	19 f4       	brne	.+6      	; 0xa0e <__addsf3+0x24>
 a08:	26 f4       	brtc	.+8      	; 0xa12 <__addsf3+0x28>
 a0a:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_nan>
 a0e:	0e f4       	brtc	.+2      	; 0xa12 <__addsf3+0x28>
 a10:	e0 95       	com	r30
 a12:	e7 fb       	bst	r30, 7
 a14:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__fp_inf>

00000a18 <__addsf3x>:
 a18:	e9 2f       	mov	r30, r25
 a1a:	0e 94 31 06 	call	0xc62	; 0xc62 <__fp_split3>
 a1e:	58 f3       	brcs	.-42     	; 0x9f6 <__addsf3+0xc>
 a20:	ba 17       	cp	r27, r26
 a22:	62 07       	cpc	r22, r18
 a24:	73 07       	cpc	r23, r19
 a26:	84 07       	cpc	r24, r20
 a28:	95 07       	cpc	r25, r21
 a2a:	20 f0       	brcs	.+8      	; 0xa34 <__addsf3x+0x1c>
 a2c:	79 f4       	brne	.+30     	; 0xa4c <__addsf3x+0x34>
 a2e:	a6 f5       	brtc	.+104    	; 0xa98 <__addsf3x+0x80>
 a30:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__fp_zero>
 a34:	0e f4       	brtc	.+2      	; 0xa38 <__addsf3x+0x20>
 a36:	e0 95       	com	r30
 a38:	0b 2e       	mov	r0, r27
 a3a:	ba 2f       	mov	r27, r26
 a3c:	a0 2d       	mov	r26, r0
 a3e:	0b 01       	movw	r0, r22
 a40:	b9 01       	movw	r22, r18
 a42:	90 01       	movw	r18, r0
 a44:	0c 01       	movw	r0, r24
 a46:	ca 01       	movw	r24, r20
 a48:	a0 01       	movw	r20, r0
 a4a:	11 24       	eor	r1, r1
 a4c:	ff 27       	eor	r31, r31
 a4e:	59 1b       	sub	r21, r25
 a50:	99 f0       	breq	.+38     	; 0xa78 <__addsf3x+0x60>
 a52:	59 3f       	cpi	r21, 0xF9	; 249
 a54:	50 f4       	brcc	.+20     	; 0xa6a <__addsf3x+0x52>
 a56:	50 3e       	cpi	r21, 0xE0	; 224
 a58:	68 f1       	brcs	.+90     	; 0xab4 <__addsf3x+0x9c>
 a5a:	1a 16       	cp	r1, r26
 a5c:	f0 40       	sbci	r31, 0x00	; 0
 a5e:	a2 2f       	mov	r26, r18
 a60:	23 2f       	mov	r18, r19
 a62:	34 2f       	mov	r19, r20
 a64:	44 27       	eor	r20, r20
 a66:	58 5f       	subi	r21, 0xF8	; 248
 a68:	f3 cf       	rjmp	.-26     	; 0xa50 <__addsf3x+0x38>
 a6a:	46 95       	lsr	r20
 a6c:	37 95       	ror	r19
 a6e:	27 95       	ror	r18
 a70:	a7 95       	ror	r26
 a72:	f0 40       	sbci	r31, 0x00	; 0
 a74:	53 95       	inc	r21
 a76:	c9 f7       	brne	.-14     	; 0xa6a <__addsf3x+0x52>
 a78:	7e f4       	brtc	.+30     	; 0xa98 <__addsf3x+0x80>
 a7a:	1f 16       	cp	r1, r31
 a7c:	ba 0b       	sbc	r27, r26
 a7e:	62 0b       	sbc	r22, r18
 a80:	73 0b       	sbc	r23, r19
 a82:	84 0b       	sbc	r24, r20
 a84:	ba f0       	brmi	.+46     	; 0xab4 <__addsf3x+0x9c>
 a86:	91 50       	subi	r25, 0x01	; 1
 a88:	a1 f0       	breq	.+40     	; 0xab2 <__addsf3x+0x9a>
 a8a:	ff 0f       	add	r31, r31
 a8c:	bb 1f       	adc	r27, r27
 a8e:	66 1f       	adc	r22, r22
 a90:	77 1f       	adc	r23, r23
 a92:	88 1f       	adc	r24, r24
 a94:	c2 f7       	brpl	.-16     	; 0xa86 <__addsf3x+0x6e>
 a96:	0e c0       	rjmp	.+28     	; 0xab4 <__addsf3x+0x9c>
 a98:	ba 0f       	add	r27, r26
 a9a:	62 1f       	adc	r22, r18
 a9c:	73 1f       	adc	r23, r19
 a9e:	84 1f       	adc	r24, r20
 aa0:	48 f4       	brcc	.+18     	; 0xab4 <__addsf3x+0x9c>
 aa2:	87 95       	ror	r24
 aa4:	77 95       	ror	r23
 aa6:	67 95       	ror	r22
 aa8:	b7 95       	ror	r27
 aaa:	f7 95       	ror	r31
 aac:	9e 3f       	cpi	r25, 0xFE	; 254
 aae:	08 f0       	brcs	.+2      	; 0xab2 <__addsf3x+0x9a>
 ab0:	b0 cf       	rjmp	.-160    	; 0xa12 <__addsf3+0x28>
 ab2:	93 95       	inc	r25
 ab4:	88 0f       	add	r24, r24
 ab6:	08 f0       	brcs	.+2      	; 0xaba <__addsf3x+0xa2>
 ab8:	99 27       	eor	r25, r25
 aba:	ee 0f       	add	r30, r30
 abc:	97 95       	ror	r25
 abe:	87 95       	ror	r24
 ac0:	08 95       	ret

00000ac2 <__divsf3>:
 ac2:	0e 94 75 05 	call	0xaea	; 0xaea <__divsf3x>
 ac6:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_round>
 aca:	0e 94 19 06 	call	0xc32	; 0xc32 <__fp_pscB>
 ace:	58 f0       	brcs	.+22     	; 0xae6 <__divsf3+0x24>
 ad0:	0e 94 12 06 	call	0xc24	; 0xc24 <__fp_pscA>
 ad4:	40 f0       	brcs	.+16     	; 0xae6 <__divsf3+0x24>
 ad6:	29 f4       	brne	.+10     	; 0xae2 <__divsf3+0x20>
 ad8:	5f 3f       	cpi	r21, 0xFF	; 255
 ada:	29 f0       	breq	.+10     	; 0xae6 <__divsf3+0x24>
 adc:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__fp_inf>
 ae0:	51 11       	cpse	r21, r1
 ae2:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_szero>
 ae6:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_nan>

00000aea <__divsf3x>:
 aea:	0e 94 31 06 	call	0xc62	; 0xc62 <__fp_split3>
 aee:	68 f3       	brcs	.-38     	; 0xaca <__divsf3+0x8>

00000af0 <__divsf3_pse>:
 af0:	99 23       	and	r25, r25
 af2:	b1 f3       	breq	.-20     	; 0xae0 <__divsf3+0x1e>
 af4:	55 23       	and	r21, r21
 af6:	91 f3       	breq	.-28     	; 0xadc <__divsf3+0x1a>
 af8:	95 1b       	sub	r25, r21
 afa:	55 0b       	sbc	r21, r21
 afc:	bb 27       	eor	r27, r27
 afe:	aa 27       	eor	r26, r26
 b00:	62 17       	cp	r22, r18
 b02:	73 07       	cpc	r23, r19
 b04:	84 07       	cpc	r24, r20
 b06:	38 f0       	brcs	.+14     	; 0xb16 <__divsf3_pse+0x26>
 b08:	9f 5f       	subi	r25, 0xFF	; 255
 b0a:	5f 4f       	sbci	r21, 0xFF	; 255
 b0c:	22 0f       	add	r18, r18
 b0e:	33 1f       	adc	r19, r19
 b10:	44 1f       	adc	r20, r20
 b12:	aa 1f       	adc	r26, r26
 b14:	a9 f3       	breq	.-22     	; 0xb00 <__divsf3_pse+0x10>
 b16:	35 d0       	rcall	.+106    	; 0xb82 <__divsf3_pse+0x92>
 b18:	0e 2e       	mov	r0, r30
 b1a:	3a f0       	brmi	.+14     	; 0xb2a <__divsf3_pse+0x3a>
 b1c:	e0 e8       	ldi	r30, 0x80	; 128
 b1e:	32 d0       	rcall	.+100    	; 0xb84 <__divsf3_pse+0x94>
 b20:	91 50       	subi	r25, 0x01	; 1
 b22:	50 40       	sbci	r21, 0x00	; 0
 b24:	e6 95       	lsr	r30
 b26:	00 1c       	adc	r0, r0
 b28:	ca f7       	brpl	.-14     	; 0xb1c <__divsf3_pse+0x2c>
 b2a:	2b d0       	rcall	.+86     	; 0xb82 <__divsf3_pse+0x92>
 b2c:	fe 2f       	mov	r31, r30
 b2e:	29 d0       	rcall	.+82     	; 0xb82 <__divsf3_pse+0x92>
 b30:	66 0f       	add	r22, r22
 b32:	77 1f       	adc	r23, r23
 b34:	88 1f       	adc	r24, r24
 b36:	bb 1f       	adc	r27, r27
 b38:	26 17       	cp	r18, r22
 b3a:	37 07       	cpc	r19, r23
 b3c:	48 07       	cpc	r20, r24
 b3e:	ab 07       	cpc	r26, r27
 b40:	b0 e8       	ldi	r27, 0x80	; 128
 b42:	09 f0       	breq	.+2      	; 0xb46 <__divsf3_pse+0x56>
 b44:	bb 0b       	sbc	r27, r27
 b46:	80 2d       	mov	r24, r0
 b48:	bf 01       	movw	r22, r30
 b4a:	ff 27       	eor	r31, r31
 b4c:	93 58       	subi	r25, 0x83	; 131
 b4e:	5f 4f       	sbci	r21, 0xFF	; 255
 b50:	3a f0       	brmi	.+14     	; 0xb60 <__divsf3_pse+0x70>
 b52:	9e 3f       	cpi	r25, 0xFE	; 254
 b54:	51 05       	cpc	r21, r1
 b56:	78 f0       	brcs	.+30     	; 0xb76 <__divsf3_pse+0x86>
 b58:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__fp_inf>
 b5c:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_szero>
 b60:	5f 3f       	cpi	r21, 0xFF	; 255
 b62:	e4 f3       	brlt	.-8      	; 0xb5c <__divsf3_pse+0x6c>
 b64:	98 3e       	cpi	r25, 0xE8	; 232
 b66:	d4 f3       	brlt	.-12     	; 0xb5c <__divsf3_pse+0x6c>
 b68:	86 95       	lsr	r24
 b6a:	77 95       	ror	r23
 b6c:	67 95       	ror	r22
 b6e:	b7 95       	ror	r27
 b70:	f7 95       	ror	r31
 b72:	9f 5f       	subi	r25, 0xFF	; 255
 b74:	c9 f7       	brne	.-14     	; 0xb68 <__divsf3_pse+0x78>
 b76:	88 0f       	add	r24, r24
 b78:	91 1d       	adc	r25, r1
 b7a:	96 95       	lsr	r25
 b7c:	87 95       	ror	r24
 b7e:	97 f9       	bld	r25, 7
 b80:	08 95       	ret
 b82:	e1 e0       	ldi	r30, 0x01	; 1
 b84:	66 0f       	add	r22, r22
 b86:	77 1f       	adc	r23, r23
 b88:	88 1f       	adc	r24, r24
 b8a:	bb 1f       	adc	r27, r27
 b8c:	62 17       	cp	r22, r18
 b8e:	73 07       	cpc	r23, r19
 b90:	84 07       	cpc	r24, r20
 b92:	ba 07       	cpc	r27, r26
 b94:	20 f0       	brcs	.+8      	; 0xb9e <__divsf3_pse+0xae>
 b96:	62 1b       	sub	r22, r18
 b98:	73 0b       	sbc	r23, r19
 b9a:	84 0b       	sbc	r24, r20
 b9c:	ba 0b       	sbc	r27, r26
 b9e:	ee 1f       	adc	r30, r30
 ba0:	88 f7       	brcc	.-30     	; 0xb84 <__divsf3_pse+0x94>
 ba2:	e0 95       	com	r30
 ba4:	08 95       	ret

00000ba6 <__fixsfsi>:
 ba6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fixunssfsi>
 baa:	68 94       	set
 bac:	b1 11       	cpse	r27, r1
 bae:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_szero>
 bb2:	08 95       	ret

00000bb4 <__fixunssfsi>:
 bb4:	0e 94 39 06 	call	0xc72	; 0xc72 <__fp_splitA>
 bb8:	88 f0       	brcs	.+34     	; 0xbdc <__fixunssfsi+0x28>
 bba:	9f 57       	subi	r25, 0x7F	; 127
 bbc:	98 f0       	brcs	.+38     	; 0xbe4 <__fixunssfsi+0x30>
 bbe:	b9 2f       	mov	r27, r25
 bc0:	99 27       	eor	r25, r25
 bc2:	b7 51       	subi	r27, 0x17	; 23
 bc4:	b0 f0       	brcs	.+44     	; 0xbf2 <__fixunssfsi+0x3e>
 bc6:	e1 f0       	breq	.+56     	; 0xc00 <__fixunssfsi+0x4c>
 bc8:	66 0f       	add	r22, r22
 bca:	77 1f       	adc	r23, r23
 bcc:	88 1f       	adc	r24, r24
 bce:	99 1f       	adc	r25, r25
 bd0:	1a f0       	brmi	.+6      	; 0xbd8 <__fixunssfsi+0x24>
 bd2:	ba 95       	dec	r27
 bd4:	c9 f7       	brne	.-14     	; 0xbc8 <__fixunssfsi+0x14>
 bd6:	14 c0       	rjmp	.+40     	; 0xc00 <__fixunssfsi+0x4c>
 bd8:	b1 30       	cpi	r27, 0x01	; 1
 bda:	91 f0       	breq	.+36     	; 0xc00 <__fixunssfsi+0x4c>
 bdc:	0e 94 53 06 	call	0xca6	; 0xca6 <__fp_zero>
 be0:	b1 e0       	ldi	r27, 0x01	; 1
 be2:	08 95       	ret
 be4:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__fp_zero>
 be8:	67 2f       	mov	r22, r23
 bea:	78 2f       	mov	r23, r24
 bec:	88 27       	eor	r24, r24
 bee:	b8 5f       	subi	r27, 0xF8	; 248
 bf0:	39 f0       	breq	.+14     	; 0xc00 <__fixunssfsi+0x4c>
 bf2:	b9 3f       	cpi	r27, 0xF9	; 249
 bf4:	cc f3       	brlt	.-14     	; 0xbe8 <__fixunssfsi+0x34>
 bf6:	86 95       	lsr	r24
 bf8:	77 95       	ror	r23
 bfa:	67 95       	ror	r22
 bfc:	b3 95       	inc	r27
 bfe:	d9 f7       	brne	.-10     	; 0xbf6 <__fixunssfsi+0x42>
 c00:	3e f4       	brtc	.+14     	; 0xc10 <__fixunssfsi+0x5c>
 c02:	90 95       	com	r25
 c04:	80 95       	com	r24
 c06:	70 95       	com	r23
 c08:	61 95       	neg	r22
 c0a:	7f 4f       	sbci	r23, 0xFF	; 255
 c0c:	8f 4f       	sbci	r24, 0xFF	; 255
 c0e:	9f 4f       	sbci	r25, 0xFF	; 255
 c10:	08 95       	ret

00000c12 <__fp_inf>:
 c12:	97 f9       	bld	r25, 7
 c14:	9f 67       	ori	r25, 0x7F	; 127
 c16:	80 e8       	ldi	r24, 0x80	; 128
 c18:	70 e0       	ldi	r23, 0x00	; 0
 c1a:	60 e0       	ldi	r22, 0x00	; 0
 c1c:	08 95       	ret

00000c1e <__fp_nan>:
 c1e:	9f ef       	ldi	r25, 0xFF	; 255
 c20:	80 ec       	ldi	r24, 0xC0	; 192
 c22:	08 95       	ret

00000c24 <__fp_pscA>:
 c24:	00 24       	eor	r0, r0
 c26:	0a 94       	dec	r0
 c28:	16 16       	cp	r1, r22
 c2a:	17 06       	cpc	r1, r23
 c2c:	18 06       	cpc	r1, r24
 c2e:	09 06       	cpc	r0, r25
 c30:	08 95       	ret

00000c32 <__fp_pscB>:
 c32:	00 24       	eor	r0, r0
 c34:	0a 94       	dec	r0
 c36:	12 16       	cp	r1, r18
 c38:	13 06       	cpc	r1, r19
 c3a:	14 06       	cpc	r1, r20
 c3c:	05 06       	cpc	r0, r21
 c3e:	08 95       	ret

00000c40 <__fp_round>:
 c40:	09 2e       	mov	r0, r25
 c42:	03 94       	inc	r0
 c44:	00 0c       	add	r0, r0
 c46:	11 f4       	brne	.+4      	; 0xc4c <__fp_round+0xc>
 c48:	88 23       	and	r24, r24
 c4a:	52 f0       	brmi	.+20     	; 0xc60 <__fp_round+0x20>
 c4c:	bb 0f       	add	r27, r27
 c4e:	40 f4       	brcc	.+16     	; 0xc60 <__fp_round+0x20>
 c50:	bf 2b       	or	r27, r31
 c52:	11 f4       	brne	.+4      	; 0xc58 <__fp_round+0x18>
 c54:	60 ff       	sbrs	r22, 0
 c56:	04 c0       	rjmp	.+8      	; 0xc60 <__fp_round+0x20>
 c58:	6f 5f       	subi	r22, 0xFF	; 255
 c5a:	7f 4f       	sbci	r23, 0xFF	; 255
 c5c:	8f 4f       	sbci	r24, 0xFF	; 255
 c5e:	9f 4f       	sbci	r25, 0xFF	; 255
 c60:	08 95       	ret

00000c62 <__fp_split3>:
 c62:	57 fd       	sbrc	r21, 7
 c64:	90 58       	subi	r25, 0x80	; 128
 c66:	44 0f       	add	r20, r20
 c68:	55 1f       	adc	r21, r21
 c6a:	59 f0       	breq	.+22     	; 0xc82 <__fp_splitA+0x10>
 c6c:	5f 3f       	cpi	r21, 0xFF	; 255
 c6e:	71 f0       	breq	.+28     	; 0xc8c <__fp_splitA+0x1a>
 c70:	47 95       	ror	r20

00000c72 <__fp_splitA>:
 c72:	88 0f       	add	r24, r24
 c74:	97 fb       	bst	r25, 7
 c76:	99 1f       	adc	r25, r25
 c78:	61 f0       	breq	.+24     	; 0xc92 <__fp_splitA+0x20>
 c7a:	9f 3f       	cpi	r25, 0xFF	; 255
 c7c:	79 f0       	breq	.+30     	; 0xc9c <__fp_splitA+0x2a>
 c7e:	87 95       	ror	r24
 c80:	08 95       	ret
 c82:	12 16       	cp	r1, r18
 c84:	13 06       	cpc	r1, r19
 c86:	14 06       	cpc	r1, r20
 c88:	55 1f       	adc	r21, r21
 c8a:	f2 cf       	rjmp	.-28     	; 0xc70 <__fp_split3+0xe>
 c8c:	46 95       	lsr	r20
 c8e:	f1 df       	rcall	.-30     	; 0xc72 <__fp_splitA>
 c90:	08 c0       	rjmp	.+16     	; 0xca2 <__fp_splitA+0x30>
 c92:	16 16       	cp	r1, r22
 c94:	17 06       	cpc	r1, r23
 c96:	18 06       	cpc	r1, r24
 c98:	99 1f       	adc	r25, r25
 c9a:	f1 cf       	rjmp	.-30     	; 0xc7e <__fp_splitA+0xc>
 c9c:	86 95       	lsr	r24
 c9e:	71 05       	cpc	r23, r1
 ca0:	61 05       	cpc	r22, r1
 ca2:	08 94       	sec
 ca4:	08 95       	ret

00000ca6 <__fp_zero>:
 ca6:	e8 94       	clt

00000ca8 <__fp_szero>:
 ca8:	bb 27       	eor	r27, r27
 caa:	66 27       	eor	r22, r22
 cac:	77 27       	eor	r23, r23
 cae:	cb 01       	movw	r24, r22
 cb0:	97 f9       	bld	r25, 7
 cb2:	08 95       	ret

00000cb4 <__mulsf3>:
 cb4:	0e 94 6d 06 	call	0xcda	; 0xcda <__mulsf3x>
 cb8:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_round>
 cbc:	0e 94 12 06 	call	0xc24	; 0xc24 <__fp_pscA>
 cc0:	38 f0       	brcs	.+14     	; 0xcd0 <__mulsf3+0x1c>
 cc2:	0e 94 19 06 	call	0xc32	; 0xc32 <__fp_pscB>
 cc6:	20 f0       	brcs	.+8      	; 0xcd0 <__mulsf3+0x1c>
 cc8:	95 23       	and	r25, r21
 cca:	11 f0       	breq	.+4      	; 0xcd0 <__mulsf3+0x1c>
 ccc:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__fp_inf>
 cd0:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_nan>
 cd4:	11 24       	eor	r1, r1
 cd6:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_szero>

00000cda <__mulsf3x>:
 cda:	0e 94 31 06 	call	0xc62	; 0xc62 <__fp_split3>
 cde:	70 f3       	brcs	.-36     	; 0xcbc <__mulsf3+0x8>

00000ce0 <__mulsf3_pse>:
 ce0:	95 9f       	mul	r25, r21
 ce2:	c1 f3       	breq	.-16     	; 0xcd4 <__mulsf3+0x20>
 ce4:	95 0f       	add	r25, r21
 ce6:	50 e0       	ldi	r21, 0x00	; 0
 ce8:	55 1f       	adc	r21, r21
 cea:	62 9f       	mul	r22, r18
 cec:	f0 01       	movw	r30, r0
 cee:	72 9f       	mul	r23, r18
 cf0:	bb 27       	eor	r27, r27
 cf2:	f0 0d       	add	r31, r0
 cf4:	b1 1d       	adc	r27, r1
 cf6:	63 9f       	mul	r22, r19
 cf8:	aa 27       	eor	r26, r26
 cfa:	f0 0d       	add	r31, r0
 cfc:	b1 1d       	adc	r27, r1
 cfe:	aa 1f       	adc	r26, r26
 d00:	64 9f       	mul	r22, r20
 d02:	66 27       	eor	r22, r22
 d04:	b0 0d       	add	r27, r0
 d06:	a1 1d       	adc	r26, r1
 d08:	66 1f       	adc	r22, r22
 d0a:	82 9f       	mul	r24, r18
 d0c:	22 27       	eor	r18, r18
 d0e:	b0 0d       	add	r27, r0
 d10:	a1 1d       	adc	r26, r1
 d12:	62 1f       	adc	r22, r18
 d14:	73 9f       	mul	r23, r19
 d16:	b0 0d       	add	r27, r0
 d18:	a1 1d       	adc	r26, r1
 d1a:	62 1f       	adc	r22, r18
 d1c:	83 9f       	mul	r24, r19
 d1e:	a0 0d       	add	r26, r0
 d20:	61 1d       	adc	r22, r1
 d22:	22 1f       	adc	r18, r18
 d24:	74 9f       	mul	r23, r20
 d26:	33 27       	eor	r19, r19
 d28:	a0 0d       	add	r26, r0
 d2a:	61 1d       	adc	r22, r1
 d2c:	23 1f       	adc	r18, r19
 d2e:	84 9f       	mul	r24, r20
 d30:	60 0d       	add	r22, r0
 d32:	21 1d       	adc	r18, r1
 d34:	82 2f       	mov	r24, r18
 d36:	76 2f       	mov	r23, r22
 d38:	6a 2f       	mov	r22, r26
 d3a:	11 24       	eor	r1, r1
 d3c:	9f 57       	subi	r25, 0x7F	; 127
 d3e:	50 40       	sbci	r21, 0x00	; 0
 d40:	9a f0       	brmi	.+38     	; 0xd68 <__mulsf3_pse+0x88>
 d42:	f1 f0       	breq	.+60     	; 0xd80 <__mulsf3_pse+0xa0>
 d44:	88 23       	and	r24, r24
 d46:	4a f0       	brmi	.+18     	; 0xd5a <__mulsf3_pse+0x7a>
 d48:	ee 0f       	add	r30, r30
 d4a:	ff 1f       	adc	r31, r31
 d4c:	bb 1f       	adc	r27, r27
 d4e:	66 1f       	adc	r22, r22
 d50:	77 1f       	adc	r23, r23
 d52:	88 1f       	adc	r24, r24
 d54:	91 50       	subi	r25, 0x01	; 1
 d56:	50 40       	sbci	r21, 0x00	; 0
 d58:	a9 f7       	brne	.-22     	; 0xd44 <__mulsf3_pse+0x64>
 d5a:	9e 3f       	cpi	r25, 0xFE	; 254
 d5c:	51 05       	cpc	r21, r1
 d5e:	80 f0       	brcs	.+32     	; 0xd80 <__mulsf3_pse+0xa0>
 d60:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__fp_inf>
 d64:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_szero>
 d68:	5f 3f       	cpi	r21, 0xFF	; 255
 d6a:	e4 f3       	brlt	.-8      	; 0xd64 <__mulsf3_pse+0x84>
 d6c:	98 3e       	cpi	r25, 0xE8	; 232
 d6e:	d4 f3       	brlt	.-12     	; 0xd64 <__mulsf3_pse+0x84>
 d70:	86 95       	lsr	r24
 d72:	77 95       	ror	r23
 d74:	67 95       	ror	r22
 d76:	b7 95       	ror	r27
 d78:	f7 95       	ror	r31
 d7a:	e7 95       	ror	r30
 d7c:	9f 5f       	subi	r25, 0xFF	; 255
 d7e:	c1 f7       	brne	.-16     	; 0xd70 <__mulsf3_pse+0x90>
 d80:	fe 2b       	or	r31, r30
 d82:	88 0f       	add	r24, r24
 d84:	91 1d       	adc	r25, r1
 d86:	96 95       	lsr	r25
 d88:	87 95       	ror	r24
 d8a:	97 f9       	bld	r25, 7
 d8c:	08 95       	ret

00000d8e <__udivmodhi4>:
 d8e:	aa 1b       	sub	r26, r26
 d90:	bb 1b       	sub	r27, r27
 d92:	51 e1       	ldi	r21, 0x11	; 17
 d94:	07 c0       	rjmp	.+14     	; 0xda4 <__udivmodhi4_ep>

00000d96 <__udivmodhi4_loop>:
 d96:	aa 1f       	adc	r26, r26
 d98:	bb 1f       	adc	r27, r27
 d9a:	a6 17       	cp	r26, r22
 d9c:	b7 07       	cpc	r27, r23
 d9e:	10 f0       	brcs	.+4      	; 0xda4 <__udivmodhi4_ep>
 da0:	a6 1b       	sub	r26, r22
 da2:	b7 0b       	sbc	r27, r23

00000da4 <__udivmodhi4_ep>:
 da4:	88 1f       	adc	r24, r24
 da6:	99 1f       	adc	r25, r25
 da8:	5a 95       	dec	r21
 daa:	a9 f7       	brne	.-22     	; 0xd96 <__udivmodhi4_loop>
 dac:	80 95       	com	r24
 dae:	90 95       	com	r25
 db0:	bc 01       	movw	r22, r24
 db2:	cd 01       	movw	r24, r26
 db4:	08 95       	ret

00000db6 <__udivmodsi4>:
 db6:	a1 e2       	ldi	r26, 0x21	; 33
 db8:	1a 2e       	mov	r1, r26
 dba:	aa 1b       	sub	r26, r26
 dbc:	bb 1b       	sub	r27, r27
 dbe:	fd 01       	movw	r30, r26
 dc0:	0d c0       	rjmp	.+26     	; 0xddc <__udivmodsi4_ep>

00000dc2 <__udivmodsi4_loop>:
 dc2:	aa 1f       	adc	r26, r26
 dc4:	bb 1f       	adc	r27, r27
 dc6:	ee 1f       	adc	r30, r30
 dc8:	ff 1f       	adc	r31, r31
 dca:	a2 17       	cp	r26, r18
 dcc:	b3 07       	cpc	r27, r19
 dce:	e4 07       	cpc	r30, r20
 dd0:	f5 07       	cpc	r31, r21
 dd2:	20 f0       	brcs	.+8      	; 0xddc <__udivmodsi4_ep>
 dd4:	a2 1b       	sub	r26, r18
 dd6:	b3 0b       	sbc	r27, r19
 dd8:	e4 0b       	sbc	r30, r20
 dda:	f5 0b       	sbc	r31, r21

00000ddc <__udivmodsi4_ep>:
 ddc:	66 1f       	adc	r22, r22
 dde:	77 1f       	adc	r23, r23
 de0:	88 1f       	adc	r24, r24
 de2:	99 1f       	adc	r25, r25
 de4:	1a 94       	dec	r1
 de6:	69 f7       	brne	.-38     	; 0xdc2 <__udivmodsi4_loop>
 de8:	60 95       	com	r22
 dea:	70 95       	com	r23
 dec:	80 95       	com	r24
 dee:	90 95       	com	r25
 df0:	9b 01       	movw	r18, r22
 df2:	ac 01       	movw	r20, r24
 df4:	bd 01       	movw	r22, r26
 df6:	cf 01       	movw	r24, r30
 df8:	08 95       	ret

00000dfa <_exit>:
 dfa:	f8 94       	cli

00000dfc <__stop_program>:
 dfc:	ff cf       	rjmp	.-2      	; 0xdfc <__stop_program>
